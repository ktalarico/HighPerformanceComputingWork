#include<stdlib.h>
#include<omp.h>
#include<iostream>
#include<chrono>
#include<ctime>

int main(){
  using namespace std::chrono;
  int n = 1000*1000;
  steady_clock::time_point start, end;
  #pragma omp parallel
  {
    int p = omp_get_thread_num();
    float *a, *b;
    posix_memalign((void **)&a, 32, n*sizeof(float));
    posix_memalign((void **)&b, 32, n*sizeof(float));
    if(p==0){
      start = steady_clock::now();
    }
    for(int i=0; i<n; i++){
      b[i] = a[i];
    }
    if(p=0){
      end = steady_clock::now();
    }
    free(a);
    free(b);
  }
  duration<double> elapsed_time = duration_cast<duration<double>>(end-start);
  std::cout<<"Took: "<<elapsed_time.count()<<"\n";
}
